import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    PicklePersistence
)
import random
import asyncio
import signal
import sys
import os
from datetime import datetime, timedelta

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
ADMIN_CHAT_ID = 6338469528  # –í–∞—à ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
PERSISTENCE_FILE = 'bot_data.pickle'
TOKEN = os.getenv('7779333655:AAHhSmhTry1NJyHoR215eCHFzRjCFfU8-n8', '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê')

# ========== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ==========
class GameState:
    def __init__(self):
        self.reset()
    
    def reset(self):
        self.registration_open = False
        self.game_active = False
        self.players = {}  # {user_id: {'user_obj': user, 'active': True}}
        self.current_player = None
        self.chat_open = False
        self.used_players = set()
        self.admins = set()
        self.group_id = None
        self.last_choice = None
        self.task_creator = None
        self.round = 0
        self.timers = []
        self.bot_username = None

    def cancel_timers(self):
        for timer in self.timers:
            if not timer.done():
                timer.cancel()
        self.timers = []

game = GameState()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def get_chat_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞"""
    try:
        admins = await context.bot.get_chat_administrators(update.effective_chat.id)
        return {admin.user.id for admin in admins}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
        return set()

async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not game.admins:
        game.admins = await get_chat_admins(update, context)
    return update.effective_user.id in game.admins

async def update_registration_message(context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
    if not game.group_id:
        return
    
    try:
        players_list = "\n".join([
            f"@{user['user_obj'].username}" if user['user_obj'].username else user['user_obj'].first_name
            for user in game.players.values() if user['active']
        ]) or "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç"
        
        last_msg = context.chat_data.get('reg_msg_id')
        if last_msg:
            await context.bot.edit_message_text(
                chat_id=game.group_id,
                message_id=last_msg,
                text=f"üì¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É (–∏–≥—Ä–æ–∫–æ–≤: {len(game.players)})\n\n"
                     f"üéÆ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data='join')],
                    [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='leave')],
                    [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='start_game')]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
async def start_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start@DesireorActionBot"""
    try:
        if not game.bot_username:
            me = await context.bot.get_me()
            game.bot_username = me.username
        
        if not update.message.text.endswith(f"@{game.bot_username}"):
            return
        
        if not await is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
            return
        
        if game.registration_open:
            await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            return
        
        game.reset()
        game.registration_open = True
        game.group_id = update.effective_chat.id
        
        msg = await update.message.reply_text(
            "ü§ñ *–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            "üì¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É (–∏–≥—Ä–æ–∫–æ–≤: 0)\n\n"
            "üéÆ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data='join')],
                [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='leave')],
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='start_game')]
            ])
        )
        
        context.chat_data['reg_msg_id'] = msg.message_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_bot: {e}")
        await error_handler(update, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        
        if query.data == 'join':
            await handle_join(query, context)
        elif query.data == 'leave':
            await handle_leave(query, context)
        elif query.data == 'start_game':
            await handle_start_game(query, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await error_handler(update, context)

async def handle_join(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    if not game.registration_open:
        await query.edit_message_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!")
        return
    
    if query.from_user.id in game.players:
        await query.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    game.players[query.from_user.id] = {'user_obj': query.from_user, 'active': True}
    await update_registration_message(context)
    await query.answer("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")

async def handle_leave(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞"""
    if not game.registration_open:
        await query.edit_message_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!")
        return
    
    if query.from_user.id not in game.players:
        await query.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    game.players[query.from_user.id]['active'] = False
    await update_registration_message(context)
    await query.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã")

async def handle_start_game(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"""
    if not await is_admin(query, context):
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!", show_alert=True)
        return
    
    active_players = [p for p in game.players.values() if p['active']]
    if len(active_players) < 2:
        await query.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!", show_alert=True)
        return
    
    game.registration_open = False
    game.game_active = True
    await query.edit_message_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
    
    await context.bot.send_message(
        chat_id=game.group_id,
        text="üé≠ *–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!*\n\n"
             "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:\n"
             "1. –ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
             "2. –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç: –ñ–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ\n"
             "3. –î—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ\n"
             "4. –í—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç!\n\n"
             "–ì–æ—Ç–æ–≤—ã? –ü–æ–µ—Ö–∞–ª–∏! üöÄ"
    )
    
    await asyncio.sleep(3)
    await start_round(context)

# ========== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ==========
async def start_round(context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã"""
    try:
        if not game.game_active:
            return
        
        active_players = [uid for uid, p in game.players.items() if p['active'] and uid not in game.used_players]
        
        if not active_players:
            game.used_players = set()
            active_players = [uid for uid, p in game.players.items() if p['active']]
        
        game.current_player = random.choice(active_players)
        player = game.players[game.current_player]['user_obj']
        
        await context.bot.send_message(
            chat_id=game.group_id,
            text=f"üé≤ –†–∞—É–Ω–¥ {game.round + 1}! {player.first_name} –≤—ã–±–∏—Ä–∞–µ—Ç..."
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≠ –ñ–µ–ª–∞–Ω–∏–µ", callback_data='desire')],
            [InlineKeyboardButton("üé≠ –î–µ–π—Å—Ç–≤–∏–µ", callback_data='action')]
        ]
        
        await context.bot.send_message(
            chat_id=game.current_player,
            text="‚ùì *–ß—Ç–æ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å?*",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_round: {e}")
        await end_round(context)

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–µ–ª–∞–Ω–∏—è/–¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        if not game.game_active or query.from_user.id != game.current_player:
            await query.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
            return
        
        choice = query.data
        game.last_choice = choice
        
        await query.edit_message_reply_markup(reply_markup=None)
        
        username = query.from_user.username or query.from_user.first_name
        choice_text = "üí≠ –ñ–µ–ª–∞–Ω–∏–µ" if choice == 'desire' else "üé≠ –î–µ–π—Å—Ç–≤–∏–µ"
        
        await context.bot.send_message(
            chat_id=game.group_id,
            text=f"üé≤ {username} –≤—ã–±—Ä–∞–ª(–∞): *{choice_text}*!"
        )
        
        available_players = [
            uid for uid, p in game.players.items() 
            if p['active'] and uid != game.current_player
        ]
        
        if not available_players:
            available_players = [uid for uid, p in game.players.items() if p['active']]
        
        game.task_creator = random.choice(available_players)
        creator = game.players[game.task_creator]['user_obj']
        
        task_type = "–∂–µ–ª–∞–Ω–∏–µ" if choice == 'desire' else "–¥–µ–π—Å—Ç–≤–∏–µ"
        await context.bot.send_message(
            chat_id=game.task_creator,
            text=f"üí° –ü—Ä–∏–¥—É–º–∞–π {task_type} –¥–ª—è {username} –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
        )
        
        game.chat_open = True
        msg = await context.bot.send_message(
            chat_id=game.group_id,
            text="üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è!"
        )
        
        timer = asyncio.create_task(close_chat_timer(context, msg.message_id))
        game.timers.append(timer)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_choice: {e}")
        await error_handler(update, context)

async def close_chat_timer(context: ContextTypes.DEFAULT_TYPE, msg_id: int):
    """–¢–∞–π–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞"""
    try:
        await asyncio.sleep(120)
        
        if not game.game_active:
            return
        
        await context.bot.edit_message_text(
            chat_id=game.group_id,
            message_id=msg_id,
            text="‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ!"
        )
        
        await close_chat(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_chat_timer: {e}")

async def close_chat(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞"""
    try:
        if not game.game_active:
            return
        
        game.chat_open = False
        await context.bot.send_message(
            chat_id=game.group_id,
            text="üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç! –û–∂–∏–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ..."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_chat: {e}")

async def handle_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥–∞–¥–∞–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π/–¥–µ–π—Å—Ç–≤–∏–π"""
    try:
        if not game.game_active or update.effective_user.id != game.task_creator:
            return
        
        creator = update.effective_user
        player = game.players[game.current_player]['user_obj']
        task_text = update.message.text
        
        choice_text = "–ñ–µ–ª–∞–Ω–∏–µ" if game.last_choice == 'desire' else "–î–µ–π—Å—Ç–≤–∏–µ"
        creator_name = creator.username or creator.first_name
        player_name = player.username or player.first_name
        
        await context.bot.send_message(
            chat_id=game.group_id,
            text=f"üéâ *{choice_text} –¥–ª—è {player_name}!*\n\n"
                 f"üé§ –û—Ç {creator_name}:\n"
                 f"_{task_text}_\n\n"
                 f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω—è—Ç—å! ‚è≥"
        )
        
        await end_round(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_task: {e}")
        await error_handler(update, context)

async def end_round(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—É–Ω–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π"""
    try:
        game.round += 1
        game.used_players.add(game.current_player)
        await asyncio.sleep(5)
        await start_round(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ end_round: {e}")

async def stop_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    try:
        if not await is_admin(update, context):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–≥—Ä—É!")
            return
        
        if not game.game_active:
            await update.message.reply_text("‚ÑπÔ∏è –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!")
            return
        
        game.cancel_timers()
        game.reset()
        await update.message.reply_text("üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_game: {e}")
        await error_handler(update, context)

async def health_check(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        if game.group_id:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text="ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ health_check: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)
    
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        
        for admin_id in game.admins:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üö® –û—à–∏–±–∫–∞ –±–æ—Ç–∞:\n{context.error}"
                )
            except:
                continue
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

def shutdown_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    game.cancel_timers()
    sys.exit(0)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, shutdown_handler)
        signal.signal(signal.SIGTERM, shutdown_handler)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        persistence = PicklePersistence(filepath=PERSISTENCE_FILE)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = ApplicationBuilder() \
            .token(TOKEN) \
            .persistence(persistence) \
            .read_timeout(30) \
            .write_timeout(30) \
            .build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_bot))
        application.add_handler(CommandHandler("stop", stop_game))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task))
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        application.job_queue.run_repeating(
            health_check, 
            interval=3600,  # –ö–∞–∂–¥—ã–π —á–∞—Å
            first=10
        )
        
        application.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
